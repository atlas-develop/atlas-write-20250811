# telegram/classes/request
# –ó–∞–ø—Ä–æ—Å –∫ GPT

import json
from datetime import datetime
from datetime import date, timedelta
from telegram import Update
from telegram.ext import ContextTypes
from pathlib import Path
import ast
from telegram.error import TelegramError

class Request:
    def __init__(self, main):
        self.main = main
        self._system_prompt = None
        self.system_path = Path('base/system.md')

    async def clear_dialog(self, update: Update = None):

        # –ü–æ–ª—É—á–∞–µ–º id –∫–ª–∏–µ–Ω—Ç–∞
        telegram_user_id = str(update.effective_user.id)
        client_id = await self.get_or_create_client_id(telegram_user_id, update)
        if False: return client_id
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        delete_sql = "UPDATE `rec_dialog` SET `is_delete`=1 WHERE client_id = %s"
        await self.main.mysql.execute(delete_sql, (client_id,))

        # –û—á–∏—â–∞–µ–º summary
        update_sql = "UPDATE `rec_client` SET summary = NULL WHERE id = %s"
        await self.main.mysql.execute(update_sql, (client_id,))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç client_id
        return client_id

    async def get_or_create_client_id(self, telegram_user_id: str, update: Update = None) -> int:
        # 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
        sql = "SELECT id FROM rec_client WHERE tel_id = %s"
        result = await self.main.mysql.fetch_one(sql, (telegram_user_id,))
        if result:
            return result[0]

        # 2. –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ update, –µ—Å–ª–∏ –µ—Å—Ç—å
        tel_username = update.effective_user.username if update else None
        tel_name = update.effective_user.full_name if update else None
        tel_first = update.effective_user.first_name if update else None

        # 3. –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞
        insert_sql = """
            INSERT INTO rec_client (tel_id, tel_username, tel_name, tel_first)
            VALUES (%s, %s, %s, %s)
        """
        await self.main.mysql.execute(insert_sql, (
            telegram_user_id,
            tel_username,
            tel_name,
            tel_first
        ))

        # 4. –ü–æ–ª—É—á–∞–µ–º ID
        result = await self.main.mysql.fetch_one(sql, (telegram_user_id,))
        return result[0]

    async def get_client_history(self, client_id: int):
        sql = "SELECT role, content FROM rec_dialog WHERE client_id = %s AND `is_delete`=0 ORDER BY `time` ASC"
        rows = await self.main.mysql.fetch_all(sql, (client_id,))
        value = self.main.env.get('DIALOG_SAVE')
        value_int = int(value) if value is not None else None
        extract = (value_int + 1) * 2

        role_map = {0: "user", 1: "assistant"}
        history = [{"role": role_map.get(role, "user"), "content": content} for role, content in rows[-extract:]]

        if len(history) >= extract:
            hist_summary = history[:2]
            hist_dialog = history[2:]
        else:
            hist_summary = []
            hist_dialog = history

        return hist_dialog, hist_summary

    async def save_message(self, client_id: int, role: str, content: str, tokens_in: int = 0, tokens_out: int = 0):
        content = str(content)
        role_map = {'user': 0, 'assistant': 1}
        role_int = role_map.get(role, 0)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0 (user), –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

        if role == 'user':
            sql = "INSERT INTO rec_dialog (client_id, role, content) VALUES (%s, %s, %s)"
            params = (client_id, role_int, content)
        else:
            sql = """
                INSERT INTO rec_dialog (
                    client_id, role, content,
                    tokens_in, tokens_out,
                    price_in, price_out
                )
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """
            price_in = self.main.env.get_float('GPT_PRICE_IN')
            price_out = self.main.env.get_float('GPT_PRICE_OUT')
            params = (
                client_id, role_int, content,
                tokens_in, tokens_out,
                price_in, price_out
            )
        
        await self.main.mysql.execute(sql, params)

    async def get_today_request_count(self, client_id: int):
        today = datetime.now().strftime("%Y-%m-%d")
        sql = """
            SELECT COUNT(*) FROM rec_dialog
            WHERE client_id = %s AND role = 0 AND DATE(`time`) = %s AND `is_delete`=0
        """
        result = await self.main.mysql.fetch_one(sql, (client_id, today))
        return result[0] if result else 0

    async def get_system_prompt(self):
        if self._system_prompt is None:
            try:
                self._system_prompt = self.system_path.read_text(encoding='utf-8').strip()
            except Exception as e:
                await self.main.log.log_info("System", "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è system.md", str(e), True)
                self._system_prompt = "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. (system.md –Ω–µ –Ω–∞–π–¥–µ–Ω)"
        return self._system_prompt
    
    async def get_user_summary(self, client_id: int) -> str:
        sql = "SELECT summary FROM rec_client WHERE id = %s"
        result = await self.main.mysql.fetch_one(sql, (client_id,))
        return result[0] if result and result[0] is not None else ""        

    async def update_user_summary(self, client_id: int, summary: str):
        sql = """
            UPDATE rec_client
            SET summary = %s
            WHERE id = %s
        """
        await self.main.mysql.execute(sql, (summary, client_id))    

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        telegram_user_id = str(update.effective_user.id)
        user_input = update.message.text.strip()
        user = update.message.from_user
        username = user.username if user.username else f"{user.first_name} {user.last_name or ''}".strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∫–ª–∏–µ–Ω—Ç–∞
        client_id = await self.get_or_create_client_id(telegram_user_id, update)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheet
        await self.save_to_google_sheet(client_id, username, 'user', user_input)        

        # –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        if telegram_user_id not in self.main.env.get('UNLIMITED_USERS'):
            count = await self.get_today_request_count(client_id)
            if count >= 20:
                await update.message.reply_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ 20 –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
                return

        # –ò—Å—Ç–æ—Ä–∏—è
        hist_dialog, hist_summary = await self.get_client_history(client_id)
        
        # –†–æ–ª—å system
        system = await self.get_system_prompt()
        
        # –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        # md_data = await self.generate_md_data(client_id)
        # system += "\n\n---\n\nüìö –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:\n\n" + md_data        

        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞        
        summary = await self.get_user_summary(client_id)
        hist_summary_str = "\n".join(f"{m['role']}: {m['content']}" for m in hist_summary)
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        system = system + (
            f"\n\nüïí –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {now}"
            f"\n\nüìå –¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏ –¥–ª—è summary:\n{summary}\n\n"
            f"üìå –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ summary:\n{hist_summary_str}"
        )
        
        # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –∞–¥—Ä–µ—Å–∞
        data = [
            {
                "role": "assistant",
                "content": """–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø—Ä–∏–µ–º –º–æ–∂–Ω–æ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∞–¥—Ä–µ—Å–∞–º:\n
                    'addresses': [
                        'address_id': '11', 'address_name': '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ê–∫–∞–¥–µ–º–∏–∫–∞ –ö–æ—Ä–æ–ª—ë–≤–∞, –¥. 15',
                        'address_id': '12', 'address_name': '–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥. 28',
                    ],                    
                """
            },
            {"role": "user", "content": """
                –•–æ—Ä–æ—à–æ. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –º–Ω–µ –≤—ã–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å - –ø–µ—Ä–µ—á–∏—Å–ª–∏ –≤—Å–µ –∞–¥—Ä–µ—Å–∞, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –¥–µ—Ñ–∏—Å–∞!\n–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ?
            """},
            {'role': 'assistant', 'content': '–í –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ (address_id=12) –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å 09:00 –¥–æ 20:00 —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —á–∞—Å –Ω–∞ 15.10.2025 –∏ 22.10.2025, –≤–æ—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ:' + """
                    {"event_id": "146", "date":"2025-10-15", "time":"09:00"},
                    {"event_id": "147", "date":"2025-10-15", "time":"10:00"},
                    {"event_id": "148", "date":"2025-10-15", "time":"11:00"},
                    {"event_id": "149", "date":"2025-10-15", "time":"12:00"},
                    {"event_id": "150", "date":"2025-10-15", "time":"13:00"},
                    {"event_id": "151", "date":"2025-10-15", "time":"14:00"},
                    {"event_id": "152", "date":"2025-10-15", "time":"15:00"},
                    {"event_id": "153", "date":"2025-10-15", "time":"16:00"},
                    {"event_id": "154", "date":"2025-10-15", "time":"17:00"},
                    {"event_id": "155", "date":"2025-10-15", "time":"18:00"},
                    {"event_id": "156", "date":"2025-10-15", "time":"19:00"},
                    {"event_id": "157", "date":"2025-10-15", "time":"20:00"},                    
                    {"event_id": "158", "date":"2025-10-22", "time":"09:00"},
                    {"event_id": "159", "date":"2025-10-22", "time":"10:00"},
                    {"event_id": "160", "date":"2025-10-22", "time":"11:00"},
                    {"event_id": "161", "date":"2025-10-22", "time":"12:00"},
                    {"event_id": "162", "date":"2025-10-22", "time":"13:00"},
                    {"event_id": "163", "date":"2025-10-22", "time":"14:00"},
                    {"event_id": "164", "date":"2025-10-22", "time":"15:00"},
                    {"event_id": "165", "date":"2025-10-22", "time":"16:00"},
                    {"event_id": "166", "date":"2025-10-22", "time":"17:00"},
                    {"event_id": "167", "date":"2025-10-22", "time":"18:00"},
                    {"event_id": "168", "date":"2025-10-22", "time":"19:00"},
                    {"event_id": "169", "date":"2025-10-22", "time":"20:00"},                    
            """},
            {"role": "user", "content": "–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ú–æ—Å–ª–≤–µ?"},            
            {'role': 'assistant', 'content': '–í –ú–æ—Å–∫–≤–µ (address_id=11) –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å 10:00 –¥–æ 16:00 —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —á–∞—Å –Ω–∞ 20.10.2025 –∏ 30.10.2025, –≤–æ—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ:' + """
                    {"event_id": "170", "date":"2025-10-20", "time":"10:00"},
                    {"event_id": "171", "date":"2025-10-20", "time":"11:00"},
                    {"event_id": "172", "date":"2025-10-20", "time":"12:00"},
                    {"event_id": "173", "date":"2025-10-20", "time":"13:00"},
                    {"event_id": "174", "date":"2025-10-20", "time":"14:00"},
                    {"event_id": "175", "date":"2025-10-20", "time":"15:00"},                    
                    {"event_id": "176", "date":"2025-10-20", "time":"16:00"},
                    {"event_id": "177", "date":"2025-10-30", "time":"10:00"},
                    {"event_id": "178", "date":"2025-10-30", "time":"11:00"},
                    {"event_id": "179", "date":"2025-10-30", "time":"12:00"},
                    {"event_id": "180", "date":"2025-10-30", "time":"13:00"},
                    {"event_id": "181", "date":"2025-10-30", "time":"14:00"},
                    {"event_id": "182", "date":"2025-10-30", "time":"15:00"},                    
                    {"event_id": "183", "date":"2025-10-30", "time":"16:00"},                     
            """},
            {"role": "user", "content": "–ö–∞–∫–æ–π –≤—Ä–∞—á –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –ú–æ—Å–∫–≤–µ?"},                        
            {"role": "assistant", "content": "–í –ú–æ—Å–∫–≤–µ (address_id=11) –ø—Ä–æ–≤–æ–¥–∏—Ç –ø—Ä–∏–µ–º {'doctor_id': 1, 'fio': '–°–æ–∫–æ–ª–æ–≤ –ò–≤–∞–Ω –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á', 'desc': '–í—Ä–∞—á –õ–§–ö, —Å—Ç–∞–∂ 19 –ª–µ—Ç'}"},
            {"role": "user", "content": "–ö–∞–∫–æ–π –≤—Ä–∞—á –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ?"},                        
            {"role": "assistant", "content": "–í –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ (address_id=12) –ø—Ä–æ–≤–æ–¥–∏—Ç –ø—Ä–∏–µ–º {'doctor_id': 2, 'fio': '–ö–∞—Ä—á–µ–≤—Å–∫–∏–π –í–∞–¥–∏–º –í–∞–¥–∏–º–æ–≤–∏—á', 'desc': '–ù–µ–≤—Ä–æ–ª–æ–≥, —Å—Ç–∞–∂ 9 –ª–µ—Ç'}"},
        ]
        
        # –î–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
        write_me_dict = await self.get_write_recept(client_id)
        write_me_current = [
            {'role': 'assistant', 'content': f'–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏–µ–º:\n{write_me_dict}' if write_me_dict else '–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏–µ–º!'},
            {'role': 'user', 'content': '–ö—Ç–æ-—Ç–æ –∏–∑ –º–æ–∏—Ö –¥—Ä—É–∑–µ–π, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤, –∑–Ω–∞–∫–æ–º—ã—Ö –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏–µ–º?'}
        ]
        write_friend_dict = await self.get_write_recept_friends(client_id)
        write_me_current += [
            {'role': 'assistant', 'content': f'–í–∞–º–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏–µ–º:\n{write_friend_dict}' if write_friend_dict else '–í–∞–º–∏ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –ø—Ä–∏–µ–º!'},
            {'role': 'user', 'content': '–ü–æ–Ω—è–ª'}
        ]        
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤
        chunks_text = await self.main.chunks.find_local(user_input)
        '''
        chunks_text = '–û—Ç–∑—ã–≤ –æ—Ç –ê–Ω–∂–µ–ª—ã 15 –ª–µ—Ç - –∫—Ä—É—Ç–æ –±—ã–ª–æ'
        chunks_role = [
            {"role": "assistant", "content": f"üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n{chunks_text}"},
            {'role': 'user', 'content': '–•–æ—Ä–æ—à–æ –ø—Ä–∏–º—É –∫ —Å–≤–µ–¥–µ–Ω–∏—é'}
        ]
        '''

        # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
        messages = [{"role": "system", "content": system}] + data + write_me_current + hist_dialog + [
            {"role": "user", "content": f"–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ. –í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (—á–∞–Ω–∫–∏): {chunks_text}"}
        ]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.save_message(client_id, "user", user_input)

        try:
            tokens_in = tokens_out = 0
            response = await self.main.gpt.request(
                messages=messages,
                model=self.main.env.get('GPT_MODEL'),
                format={"type": "json_object"},
                temperature=0.5
            )
            await self.main.log.log_info('telegram', '–ó–∞–ø—Ä–æ—Å –≤ OpenAI', messages, True)
            await self.main.log.log_info('telegram', '–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI', response, True)
            tokens_in = getattr(response.usage, "prompt_tokens", 0)
            tokens_out = getattr(response.usage, "completion_tokens", 0)            
            content = response.choices[0].message.content.strip()
            data = json.loads(content)
            answer = data.get("answer", "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª.")
            summary = data.get("summary", "")
            if summary != '':
                await self.update_user_summary(client_id, summary)           
            intent = data.get("intent", "")
            function_call = data.get("function_call", "")                  
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ Google Sheet
            await self.save_to_google_sheet(client_id, username, 'assistant', answer)

            # –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è            
            if False:
                data_info = ''
                # if intent != '': data_info += f'\nintent: {intent}'
                if function_call != '': data_info += f'\nfunction_call: {function_call}'
                if data_info != '':
                    answer += '\n\n---' + data_info
                
            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
            if function_call:
                try:
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
                    calls = [fc.strip() for fc in function_call.split('),') if fc.strip()]
                    if not calls:
                        raise ValueError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å function_call")

                    for i, call in enumerate(calls):
                        # –î–æ–±–∞–≤–ª—è–µ–º ')' –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏ split
                        if not call.endswith(')'):
                            call += ')'

                        func_name, func_args = self.parse_function_call(call)

                        # –î–æ–±–∞–≤–ª—è–µ–º client_id, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        if func_name != "notify_operator":
                            func_args.setdefault('client_id', client_id)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º update –∏ context –¥–ª—è 'notify_operator'
                        if func_name == "notify_operator":
                            func_args.setdefault('update', update)
                            func_args.setdefault('context', context)

                        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                        result = await getattr(self, func_name)(**func_args)

                        # –û—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–∑–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                        if func_name == "write_recept":
                            answer += f"\n\n‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã!"
                            await self.clear_dialog(update)
                        elif func_name == "write_me_update":
                            answer += f"\n\nüîÑ –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞!"
                            await self.clear_dialog(update)
                        elif func_name == "write_me_cancel":
                            answer += f"\n\nüö´ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!"
                            await self.clear_dialog(update)
                        elif func_name == "write_recept_friend":
                            answer += f"\n\n‚úÖ –ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
                            await self.clear_dialog(update)
                        elif func_name == "write_friend_update":
                            answer += f"\n\nüîÑ –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞!"
                            await self.clear_dialog(update)
                        elif func_name == "write_friend_cancel":
                            answer += f"\n\nüö´ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!"
                            await self.clear_dialog(update)
                        elif func_name == "notify_operator":
                            answer += f"\n\nüë®‚Äç‚öïÔ∏è –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏! –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä"                                                    
                        else:
                            answer += f"\n\n‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {func_name}"

                except Exception as fc_err:
                    await self.main.log.log_info("telegram", "–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ function_call", str(fc_err), True)
                    answer += "\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è."      
        except Exception as e:
            await self.main.log.log_info("OpenAI", "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ", str(e), True)
            answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        await self.save_message(client_id, "assistant", answer, tokens_in, tokens_out)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(answer)
        
    async def save_to_google_sheet(self, client_id, username, role, answer):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –≤ Google Sheets
        """
        current_time = datetime.now()
        google_data = {
            'filename': str(client_id) + ' - @' + username,
            'client_id': client_id,
            'row': [
                current_time.strftime('%d.%m.%Y'),
                current_time.strftime('%H:%M'),
                '',
                role,
                answer,
                ''
            ]
        }
        await self.main.log.log_info('telegram', '–î–∞–Ω–Ω—ã–µ –¥–ª—è Google', google_data, True)
        await self.main.google.row_insert(google_data)        

    async def notify_operator(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message: str):
        try:
            user = update.message.from_user
            username = f"@{user.username}" if user.username else f"id:{user.id}"
            full_message = f"üë§ –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n{message}"                            
            await context.bot.send_message(chat_id=self.main.env.get('SUPPORT_GROUP_ID'), text=full_message)
        except TelegramError as e:
            # –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ-—Å–≤–æ–µ–º—É
            await self.main.log.log_info('telegram', f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É: {e}", {}, True)
                
    async def generate_md_data(self, client_id: int) -> str:
        today = datetime.today().date()

        # places
        sql_places = "SELECT id, text FROM rec_place WHERE is_delete = 0"
        rows = await self.main.mysql.fetch_all(sql_places)
        places = {str(r[0]): r[1] for r in rows}  # r[0] = id, r[1] = text

        # masters
        sql_masters = "SELECT id, fio, `desc` FROM rec_master WHERE is_delete = 0"
        rows = await self.main.mysql.fetch_all(sql_masters)
        masters = {
            str(r[0]): {
                "fio": r[1],
                "desc": r[2] or ""
            }
            for r in rows
        }

        # events - –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ SQL
        sql_events = """
            SELECT id, date, TIME_FORMAT(time, '%H:%i') as time_str, place_id, master_id
            FROM rec_event
            WHERE is_delete = 0 AND date >= CURDATE()
            ORDER BY date ASC, time ASC
        """
        rows = await self.main.mysql.fetch_all(sql_events)

        events = {}
        for r in rows:
            event_id = str(r[0])
            place_id = str(r[3])
            master_id = str(r[4])
            events[event_id] = {
                "date": r[1].strftime('%Y-%m-%d'),
                "time": r[2],
                "place_id": place_id,
                "place_name": places.get(place_id, ""),
                "master_id": master_id,                
                "master_fio": masters.get(master_id, {}).get("fio", "")
            }

        # write_me - —Ñ–∏–ª—å—Ç—Ä –ø–æ client_id
        sql_write = """
            SELECT rw.event_id, rw.client_fio, rw.problem, rc.params, re.date
            FROM rec_write rw
            JOIN rec_client rc ON rw.client_id = rc.id
            JOIN rec_event re ON rw.event_id = re.id
            WHERE rw.is_delete = 0 AND re.date >= CURDATE() AND rw.client_id = %s
        """
        rows = await self.main.mysql.fetch_all(sql_write, (client_id,))

        write_me = []
        for r in rows:
            write_me.append({
                "event_id": str(r[0]),
                "client_fio": r[1],
                "–ü—Ä–æ–±–ª–µ–º–∞": r[2] or "",
                "–ü—Ä–æ—Ö–æ–¥–∏–ª –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ": "1" if r[3] and '"–æ–±—Å–ª–µ–¥' in r[3] else "0"
            })

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
        md = "---\n\nüì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n\n"
        md += "**places:**\n"
        md += json.dumps(places, indent=2, ensure_ascii=False) + "\n\n"

        md += "**masters:**\n"
        md += json.dumps(masters, indent=2, ensure_ascii=False) + "\n\n"

        md += "**events:**\n"
        md += json.dumps(events, indent=2, ensure_ascii=False) + "\n\n"

        md += "**write_me:**\n"
        md += json.dumps(write_me, indent=2, ensure_ascii=False) + "\n"

        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª (–º–æ–∂–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–æ —Ç—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        filename = 'base/md.md'
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(md)

        return md

    async def write_recept(self, client_id, event_id, problem, client_fio):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º.
        """       
        sql = """
            INSERT INTO rec_write (event_id, client_id, client_fio, problem)
            VALUES (%s, %s, %s, %s)
        """
        params = (event_id, client_id, client_fio, problem)
        await self.main.mysql.execute(sql, params)

    def format_event(self, event_date: date, event_time: timedelta) -> tuple[str, str]:
        total_seconds = int(event_time.total_seconds())
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        date_str = event_date.strftime('%d.%m.%Y')
        time_str = f"{hours:02d}:{minutes:02d}"
        return date_str, time_str
        
    async def get_write_recept(self, client_id):
        # write_me - —Ñ–∏–ª—å—Ç—Ä –ø–æ client_id
        sql_write = """
            SELECT re.place_id, rp.text, re.id, re.date, re.time, rw.client_fio, rw.problem, rm.fio, rm.desc
            FROM rec_write rw
            JOIN rec_client rc ON rw.client_id = rc.id
            JOIN rec_event re ON rw.event_id = re.id
            JOIN rec_place rp ON re.place_id = rp.id
            JOIN rec_master rm ON re.master_id = rm.id
            WHERE rw.is_delete = 0 AND re.date >= CURDATE() AND rw.client_id = %s
        """
        rows = await self.main.mysql.fetch_all(sql_write, (client_id,))
        write_me = []
        for r in rows:
            date_str, time_str = self.format_event(r[3], r[4])            
            write_me.append({
                "place_id": str(r[0]),
                "place_name": r[1],
                "event_id": str(r[2]),
                "event_date": date_str,                
                "event_time": time_str,                
                "client_fio": r[5],
                "problem": r[6],
                "–ü—Ä–∏–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç": r[7] + '. ' + r[8]
            })       
        
        return write_me 
    
    async def write_me(self, event_id: int, client_id: int, client_fio: str, problem: str, had_exam=None):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º.
        """
        sql = """
            INSERT INTO rec_write (event_id, client_id, client_fio, problem)
            VALUES (%s, %s, %s, %s)
        """
        params = (event_id, client_id, client_fio, problem)
        await self.main.mysql.execute(sql, params)

        return {
            "status": "ok",
            "action": "write_me",
            "event_id": event_id,
            "client_id": client_id,
            "client_fio": client_fio,
            "problem": problem,
            "had_exam": had_exam  # –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        }

    async def write_me_update(self, client_id: int, event_id: int):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ –¥—Ä—É–≥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ).
        """
        sql = """
            UPDATE rec_write
            SET event_id = %s, upd = NOW()
            WHERE client_id = %s AND is_delete = 0
        """
        params = (event_id, client_id)
        await self.main.mysql.execute(sql, params)

        return {
            "status": "ok",
            "action": "write_me_update",
            "event_id": event_id,
            "client_id": client_id
        }

    async def write_me_cancel(self, client_id: int, event_id: int):
        """
        –û—Ç–º–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ client_id –∏ event_id: —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ is_delete = 1.
        """
        sql = """
            UPDATE rec_write
            SET is_delete = 1, upd = NOW()
            WHERE client_id = %s AND event_id = %s AND is_delete = 0
        """
        params = (client_id, event_id)
        await self.main.mysql.execute(sql, params)

        return {
            "status": "ok",
            "action": "write_me_cancel",
            "client_id": client_id,
            "event_id": event_id
        }

    def parse_function_call(self, call_str: str):
        try:
            tree = ast.parse(call_str.strip(), mode="eval")
            if isinstance(tree.body, ast.Call) and isinstance(tree.body.func, ast.Name):
                func_name = tree.body.func.id
                args = {}
                for kw in tree.body.keywords:
                    key = kw.arg
                    value = ast.literal_eval(kw.value)
                    args[key] = value
                return func_name, args
        except Exception:
            pass
        return None, {}
    
    async def write_recept_friend(self, client_id: int, friend_name: str, friend_fio: str, friend_event_id, friend_problem: str):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º –¥–ª—è –¥—Ä—É–≥–∞:
        - –ü–æ–∏—Å–∫ –¥—Ä—É–≥–∞ –ø–æ –§–ò–û –≤ rec_client
        - –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ rec_client
        - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –≤ rec_friend
        - –ó–∞–ø–∏—Å—å –≤ rec_write –æ—Ç –∏–º–µ–Ω–∏ –¥—Ä—É–≥–∞
        """

        # 1. –ü–æ–∏—Å–∫ –¥—Ä—É–≥–∞ –ø–æ –ø–æ–ª—é `fio`
        sql_find_friend = """
            SELECT id FROM rec_client
            WHERE fio = %s AND is_delete = 0
            LIMIT 1
        """
        row = await self.main.mysql.fetch_one(sql_find_friend, (friend_fio,))
        if row:
            friend_id = row[0]
        else:
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ rec_client
            sql_insert_client = """
                INSERT INTO rec_client (fio)
                VALUES (%s)
            """
            friend_id = await self.main.mysql.execute_return_id(sql_insert_client, (friend_fio,))

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–≤—è–∑—å client ‚Üí friend
        sql_check_friend = """
            SELECT id FROM rec_friend
            WHERE client_id = %s AND friend_id = %s AND is_delete = 0
        """
        exists = await self.main.mysql.fetch_one(sql_check_friend, (client_id, friend_id))

        if not exists:
            sql_insert_friend = """
                INSERT INTO rec_friend (client_id, friend_id, friend_name)
                VALUES (%s, %s, %s)
            """
            await self.main.mysql.execute(sql_insert_friend, (client_id, friend_id, friend_name))

        # 4. –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º –æ—Ç –∏–º–µ–Ω–∏ –¥—Ä—É–≥–∞
        sql_write = """
            INSERT INTO rec_write (event_id, client_id, client_fio, problem)
            VALUES (%s, %s, %s, %s)
        """
        
        await self.main.mysql.execute(sql_write, (friend_event_id, friend_id, friend_fio, friend_problem))
        
    async def get_write_recept_friends(self, client_id):

        sql = """
            SELECT 
                re.place_id,
                rp.text AS place_name,
                re.id AS event_id,
                re.date AS event_date,
                re.time AS event_time,
                rw.client_fio,
                rw.problem,
                rm.fio AS master_fio,
                rm.`desc` AS master_desc,
                rw.id,
                rf.friend_name
            FROM rec_friend rf
            JOIN rec_client rc ON rf.client_id = rc.id
            JOIN rec_write rw ON rw.client_id = rf.friend_id AND rw.is_delete = 0
            JOIN rec_event re ON rw.event_id = re.id AND re.date >= CURDATE()
            JOIN rec_place rp ON re.place_id = rp.id
            JOIN rec_master rm ON re.master_id = rm.id
            WHERE rf.client_id = %s AND rf.is_delete = 0
        """

        rows = await self.main.mysql.fetch_all(sql, (client_id,))
        write_friends = []

        for r in rows:
            date_str, time_str = self.format_event(r[3], r[4])
            write_friends.append({
                "friend_place_id": str(r[0]),
                "friend_place_name": r[1],
                "friend_event_id": str(r[2]),
                "friend_event_date": date_str,
                "friend_event_time": time_str,
                "friend_fio": r[5],  # –∏–º—è –¥—Ä—É–≥–∞
                "friend_problem": r[6],
                "–ü—Ä–∏–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç": r[7] + ". " + r[8],
                "friend_write_id": r[9],
                "friend_name": r[10]
            })

        return write_friends        
        
    async def write_friend_update(self, client_id: int, friend_write_id, friend_event_id):
        """
        –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∞ –Ω–∞ –¥—Ä—É–≥–æ–π event_id (–Ω–æ–≤—ã–π –ø—Ä–∏—ë–º).
        –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥—Ä—É–≥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω —Å –∫–ª–∏–µ–Ω—Ç–æ–º.
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º event_id –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∞
        sql_update = """
            UPDATE rec_write
            SET event_id = %s
            WHERE id = %s AND is_delete = 0
        """
        await self.main.mysql.execute(sql_update, (friend_event_id, friend_write_id))

        return {
            "status": "ok",
            "action": "write_friend_update",
            "friend_write_id": friend_write_id
        }

    async def write_friend_cancel(self, client_id: int, friend_write_id):
        """
        –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_delete = 1).
        """
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        sql_cancel = """
            UPDATE rec_write
            SET is_delete = 1
            WHERE id = %s AND is_delete = 0
        """
        await self.main.mysql.execute(sql_cancel, (friend_write_id))

        return {
            "status": "ok",
            "action": "write_friend_cancel",
            "friend_write_id": friend_write_id
        }
